name: Deploy Android to Google Play (Internal)

on:
  push:
    branches:
      - build

jobs:
  build:
    name: Build & Deploy Android
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # - name: Cache node_modules
      #   uses: actions/cache@v3
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane
        run: gem install fastlane

      - name: Decrypt keystore
        run: |
          gpg --quiet --batch --yes --decrypt \
            --passphrase="$GPG_PASSPHRASE" \
            --output android/app/my-release-key.keystore \
            android/app/my-release-key.keystore.gpg
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Decrypt Play Store credentials
        run: |
          gpg --quiet --batch --yes --decrypt \
            --passphrase="$GPG_PASSPHRASE" \
            --output android/playstore_credentials.json \
            android/playstore_credentials.json.gpg
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build & Deploy with Fastlane
        working-directory: android
        run: fastlane deploy

        # ‚úÖ G·ª≠i th√¥ng b√°o v·ªÅ Discord n·∫øu build th√†nh c√¥ng
      - name: Load version info
        id: version
        run: |
          echo "üîç Current directory: $(pwd)"
          ls -la
          cat build_info.env || echo "‚ùå build_info.env not found!"
          source build_info.env
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date '+%d/%m/%Y %H:%M')" >> $GITHUB_ENV

      - name: Debug version info
        run: |
          echo "VERSION_NAME=$VERSION_NAME"
          echo "VERSION_CODE=$VERSION_CODE"
          echo "BUILD_TIME=$BUILD_TIME"

      - name: Capture error if failed
        if: failure()
        run: |
          echo "ERROR_MESSAGE<<EOF" >> $GITHUB_ENV
          tail -n 50 fastlane_build_log.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Notify Discord on success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"‚úÖ **Build & Deploy th√†nh c√¥ng** üéâ\nüì¶ Version: \`$VERSION_NAME\` (Code: \`$VERSION_CODE\`)\nüïí L√∫c: $BUILD_TIME\"}" \
            "$DISCORD_WEBHOOK"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      - name: Notify Discord on failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"‚ùå **Build th·∫•t b·∫°i** cho app \`MyApp\`\nüì¶ Version: \`$VERSION_NAME\` (Code: \`$VERSION_CODE\`)\nüïí L√∫c: $BUILD_TIME\nüß® L·ªói:\n\`\`\`\n$ERROR_MESSAGE\n\`\`\`\"}"
            $DISCORD_WEBHOOK
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
